<div class="alert-info alert">

  <strong>Heads up!</strong> Before implementing these APIs, check out our <a href="<%= docsDomain %>" target="_new">libraries</a> and <a target="_new" href="<%= docsDomain %>/libraries/lock">Lock</a>.

</div>


<div class="markdown">
<% include ./templates/client-selector %>
</div>

<h2 id="openid-connect"><a class="anchor" href="#openid-connect"><i class="icon-budicon-345"></i></a>Protocol: OpenID Connect / OAuth2 Login</h2>

<div class="markdown">This is the **recommended** protocol for new applications. Read more about how it works for [web applications](<%= docsDomain %>/oauth-web-protocol) and [single page apps / native apps](<%= docsDomain %>/oauth-implicit-protocol). All the <a href="<%= docsDomain %>" target="_new">libraries</a> and <a target="_new" href="<%= docsDomain %>/libraries/lock">Lock</a> are built on top of this protocol.</div>

<h3 id="social-auth"><a class="anchor" href="#social-auth"><i class="icon-budicon-345"> </i></a>Social Authentication</h3>
<div class="markdown">These type of connections support only browser based (passive) authentication. This is because most of these providers don't allow entering the user/password in applications that don't belong to them, so the user gets redirected to the provider (e.g. Google sign in page).</div>
<div class="accordion">

<!-- GET /authorize (social) -->
  <div class="markdown" data-verb="GET" data-path="/authorize" data-path2="/authorize_social" data-description="Login using a social provider (triggers a redirect)">
Returns a 302 redirect to the social provider specified in the `connection`.

<pre><code><span class='http-verb'>GET</span> <span class="client_namespace"></span>authorize?
  response_type=   <select id="authorize_social-response_type" class="response_type-selector"></select>   // code - server side flows | token - client side flows
  &amp;client_id=      <span class="client_client_id"></span> // <span class="client_name"></span>
  &amp;connection=     <select id="authorize_social-connection" class="social_connection-selector with-optional"></select>
  &amp;redirect_uri=   <span class="client_callback"></span>
  &amp;state=          <input type="text" id="authorize_social-state">
  &amp;<input type="text" id="authorize_social-additional_parameters" style="width: 400px;" placeholder="additional parameters">
</code></pre>

<button class='btn btn-primary btn-tryme'
        data-result='authorize_social-result'
        data-runner='authorize_social'>
   Try me!
</button>

Remarks:

* If no `connection` is specified, it will redirect to <a href="/#/login_page">Auth0 Login Page</a> and show the Login Widget.
* If `response_type=token`, after the user authenticates on the provider, it will redirect to your application callback URL passing the `access_token` and `id_token` in the address `location.hash`. This is used for Single Page Apps and also on Native Mobile SDKs.
* Additional parameters can be sent that will be passthrough to the provider. E.g. `access_type=offline` (for Google refresh tokens) , `display=popup` (for Windows Live popup mode).
* The `state` parameter will be sent back should be used for XSRF and contextual information (like a return url).
  </div>

<!-- POST /oauth/access_token -->
  <div class="markdown" data-verb="POST" data-path="/oauth/access_token" data-description="Login using a social provider's access token">
Given the social provider's `access_token` and the `connection` specified, it will do the authentication on the provider and return a JSON with the `access_token` and `id_token`. Currently, this endpoint only works for Facebook, Google, Twitter and Weibo.

<pre><code><span class='http-verb'>POST</span> <span class="client_namespace"></span>oauth/access_token
Content-Type: 'application/json'
<form id='oauth_access_token-form'>{
  "client_id":    "<span class="client_client_id"></span>", // <span class="client_name"></span>
  "access_token": "<input type="text" id="oauth_access_token-access_token" required>",
  "connection":   "<select id="oauth_access_token-connection"><option>facebook</option><option>google-oauth2</option><option>twitter</option><option>weibo</option></select>",
  "scope":        "<select id="oauth_access_token-scope" class="scope-selector"></select>",
  <textarea id="oauth_access_token-jsoneditor" rows="3" style="margin-top:7px;width:75%;"></textarea>
}
</form></code></pre>

<button class='btn btn-primary btn-tryme'
        data-result='oauth_access_token-result'
        data-runner='oauth_access_token'>
   Try me!
</button>

<pre class='tryme-result'><code id='oauth_access_token-result'>Press the Try me! button to see the output result.</code></pre>

  </div>

<h3 id="db-and-ad"><a class="anchor" href="#db-and-ad"><i class="icon-budicon-345"> </i></a>Database &amp; Active Directory / LDAP Authentication</h3>
<div class="markdown">These type of connections support browser based (passive) authentication and API-based (active) authentication. The main difference between passive and active authentication is that the former happens in the browser through the [Login Page](/#/login_page) and the latter can be invoked from anywhere (a script, server to server, etc.). Notice that is the same `authorize` endpoint than the one defined in Social Authentication. It's repeated just for clarity.</div>
<div class="accordion">

<!-- GET /authorize (db) -->
  <div class="markdown" data-verb="GET" data-path="/authorize" data-path2="/authorize_db" data-description="Redirects to the Login Page (passive authentication)">
Returns a 302 redirect to <a href="/#/login_page">Auth0 Login Page</a> that will show the Login Widget where the user can login with email and password. The `connection` parameter can be used if you have multiple database and AD connections to tell the widget which one to use.

<pre><code><span class='http-verb'>GET</span> <span class="client_namespace"></span>authorize?
  response_type=   <select id="authorize_db-response_type" class="response_type-selector"></select>
  &amp;client_id=      <span class="client_client_id"></span> // <span class="client_name"></span>
  &amp;connection=     <select id="authorize_db-connection" class="db_connection-selector with-optional"></select>
  &amp;redirect_uri=   <span class="client_callback"></span>
  &amp;state=          <input type="text" id="authorize_db-state">
  &amp;<input type="text" id="authorize_db-additional_parameters" style="width: 400px;" placeholder="additional parameters">
</code></pre>

<button class='btn btn-primary btn-tryme'
        data-result='authorize_db-result'
        data-runner='authorize_db'>
   Try me!
</button>

Remarks:

* If no `connection` is specified, it will redirect to <a href="/#/login_page">Auth0 Login Page</a> and show the Login Widget using the first database connection.
* If `response_type=token`, after the user authenticates on the provider, it will redirect to your application callback URL passing the `access_token` and `id_token` in the address `location.hash`. This is used for Single Page Apps and also on Native Mobile SDKs.
* The `state` parameter will be sent back should be used for XSRF and contextual information (like a return url).
  </div>

<!-- POST /oauth/ro -->
  <div class="markdown" data-verb="POST" data-path="/oauth/ro" data-description="Login using username/password (active authentication)">
Given the user credentials and the `connection` specified, it will do the authentication on the provider and return a JSON with the `access_token` and `id_token`. This endpoint only works for database connections, passwordless connections, Active Directory/LDAP, Windows Azure AD and ADFS.

<pre><code><span class='http-verb'>POST</span> <span class="client_namespace"></span>oauth/ro
Content-Type: 'application/json'
<form id='ro-form'>{
  "client_id":   "<span class="client_client_id"></span>", // <span class="client_name"></span>
  "username":    "<input type="text" id="ro-username" required>",
  "password":    "<input type="password" id="ro-password">",
  "id_token":    "<input type="text" id="ro-id_token">",
  "connection":  "<select id="ro-connection" class="userpass_connection-selector"></select>",
  "grant_type":  "<select id="ro-grant_type"><option>password</option><option>urn:ietf:params:oauth:grant-type:jwt-bearer</option></select>",
  "scope":       "<select id="ro-scope" class="scope-with-offline-selector"></select>",
  "device":      "<input type="text" id="ro-device">"
}
</form></code></pre>

<button class='btn btn-primary btn-tryme'
        data-result='ro-result'
        data-runner='ro'>
   Try me!
</button>

<pre class='tryme-result'><code id='ro-result'>Press the Try me! button to see the output result.</code></pre>

<h4>Error Code Reference</h4>

<h5>Grant type: jwt-bearer</h5>

<h6>HTTP 400</h6>

<ul>
  <li>
    Missing Device. You need to provide a device name for the caller device (like a browser, app, etc).
    <pre>{"error":"invalid_request","error_description":"missing device parameter"}</pre>
  </li>
  <li>
    Missing id_token. For this grant type you need to provide a JWT id token.
    <pre>{"error":"invalid_request","error_description":"missing id_token parameter"}</pre>
  </li>
  <li>
    Errors related to an invalid id_token or user:
    <pre>{"error":"invalid_grant","error_description":"..."}</pre>
  </li>
</ul>

<h5>Grant type: password</h5>

<h6>HTTP 400</h6>

<ul>
  <li>
    Missing username parameter in the request:
    <pre>{"error":"invalid_request","error_description":"missing username parameter"}</pre>
  </li>
  <li>
    Missing password parameter in the request:
    <pre>{"error":"invalid_request","error_description":"missing password parameter"}</pre>
  </li>
  <li>
    Missing connection parameter in the request:
    <pre>{"error":"invalid_request","error_description":"missing connection parameter"}</pre>
  </li>
  <li>
    Incorrect scope formatting. Each scope must be separated by whitespace.
    <pre>{"error":"invalid_request","error_description":"scope parameter must be a string"}</pre>
  </li>
  <li>
    The connection/provider does not implement username/password authentication:
    <pre>{"error":"invalid_request","error_description":"specified strategy does not support requested operation"}</pre>
  </li>
</ul>

<h6>HTTP 401</h6>

<ul>
  <li>
    Wrong username or password (this can vary depending on the identity provider):
    <pre>{"error":"invalid_user_password","error_description":"Wrong email or password."}</pre>
  </li>
  <li>
    The user is blocked:
    <pre>{"error":"unauthorized","error_description":"user is blocked"}</pre>
  </li>
  <li>
    Another site had a security breach and your password has been leaked:
    <pre>{ "error":"password_leaked", "error_description":"This login has been blocked because your password has been leaked in another website. We’ve sent you an email with instructions on how to unblock it."}</pre>
  </li>
</ul>

<h6>HTTP 429</h6>

<ul>
  <li>
    Some anomaly detections will return:
    <pre>{"error":"too_many_attempts","error_description":"..."}</pre>
    <pre>{"error":"too_many_logins","error_description":"..."}</pre>
  </li>
</ul>

<h5>All grant types</h5>

<h6>HTTP 400</h6>

<ul>
  <li>
    Missing client_id parameter in the request:
    <pre>{"error":"invalid_request","error_description":"missing client_id parameter"}</pre>
  </li>
  <li>
    Provided connection was not found:
    <pre>{"error":"invalid_request","error_description":"the connection was not found"}</pre>
  </li>
  <li>
    Provided connection is disabled. Check the connection in the dashboard, you may have turned it off for the provided client_id.
    <pre>{"error":"invalid_request","error_description":"the connection was disabled"}</pre>
  </li>
  <li>
    The connection is not properly configured with custom scripts:
    <pre>{"error":"invalid_request","error_description":"The connection is not yet configured..."}</pre>
  </li>
  <li>
    The connection does not belong to the tenant. Check your base url.
    <pre>{"error":"invalid_request","error_description":"the connection was not found for tenant..."}</pre>
  </li>
  <li>
    If you are using rules, some field name contains dots:
    <pre>{"error":"invalid_request","error_description":"Fields with "." are not allowed, please remove all dotted fields..."}</pre>
  </li>
</ul>

<h6>HTTP 403</h6>

<ul>
  <li>
    Provided client_id is not valid:
    <pre>{"error":"unauthorized_client","error_description":"invalid client"}</pre>
  </li>
   <li>
    Validation of specific points raised an access issue:
    <pre>{"error":"access_denied","error_description":"..."}</pre>
  </li>
</ul>

  </div>

<!-- POST /dbconnections/signup -->
  <div class="markdown" data-verb="POST" data-path="/dbconnections/signup" data-description="Signup using username/password (active authentication)">
Given the user credentials, the `connection` specified and the Auth0 account information, it will create a new user. You can then authenticate with this user using the `/oauth/ro` endpoint. This endpoint only works for database connections.

<pre><code><span class='http-verb'>POST</span> <span class="client_namespace"></span>dbconnections/signup
Content-Type: 'application/json'
<form id='ro-form'>{
  "client_id":   "<span class="client_client_id"></span>", // <span class="client_name"></span>
  "email":       "<input type="text" id="signup-email" required>",
  "password":    "<input type="password" id="signup-password" required>",
  "connection":  "<select id="signup-connection" class="db_connection-selector"></select>",
}
</form></code></pre>

<button class='btn btn-primary btn-tryme'
        data-result='signup-result'
        data-runner='signup'>
   Try me!
</button>

<pre class='tryme-result'><code id='signup-result'>Press the Try me! button to see the output result.</code></pre>
  </div>

  <!-- POST /dbconnections/change_password -->
  <div class="markdown" data-verb="POST" data-path="/dbconnections/change_password" data-description="Asks to change a password for a given user">
Given the user `email` address and the `connection` specified, Auth0 will send a _change password email_.

* If `password` was provided, once the user clicks on the _confirm password change link_, the new password specified in this `POST` will be set to this user.
* If `password` was NOT provided, once the user clicks on the _password change link_ they will be redirected to a page asking them for a new password.

This endpoint only works for database connections.

<pre><code><span class='http-verb'>POST</span> <span class="client_namespace"></span>dbconnections/change_password
Content-Type: 'application/json'
<form id='ro-form'>{
  "client_id":   "<span class="client_client_id"></span>", // <span class="client_name"></span>
  "email":       "<input type="text" id="chpwd-email" required>",
  "password":    "<input type="password" id="chpwd-password">", // <span>OPTIONAL: The new password (see note below)</span>
  "connection":  "<select id="chpwd-connection" class="db_connection-selector"></select>",
}
</form></code></pre>

<div class="alert-info alert">

  <strong>Heads up!</strong> If you are using Lock version 9 and above, do not set the password field! If you do, you will receive a *password is not allowed* error. You can only set the password if you are using Lock version 8. <a href="<%= docsDomain %>/connections/database/password-change" target="_new">Click here for more details.</a>

</div>

<button class='btn btn-primary btn-tryme'
        data-result='chpwd-result'
        data-runner='chpwd'>
   Try me!
</button>

<pre class='tryme-result'><code id='chpwd-result'>Press the Try me! button to see the output result.</code></pre>
  </div>

</div>

<h3 id="passwordless"><a class="anchor" href="#passwordless"><i class="icon-budicon-345"> </i></a>Passwordless Authentication</h3>
<div class="markdown">Passwordless connections, as the name suggests, don't require the user to remember a password. Instead, another mechanism is used to prove identity. It could be a one-time password sent every time the user logs in through email or SMS.</div>

<h4 id="passwordless-with_email"><a class="anchor" href="#passwordless-with_email"><i class="icon-budicon-345"> </i></a>Email</h4>
<div class="markdown"></div>
<div class="accordion">

<!-- POST /passwordless/start (email) -->
  <div class="markdown" data-verb="POST" data-path="/passwordless/start" data-path2="/with_email" data-description="Start flow sending an email">
Given the user `email` address, it will send an email with:

* A link (default, `send:"link"`). You can then authenticate with this user opening the link and he will be automatically logged in to the application. Optionally, you can append/override parameters to the link (like `scope`, `redirect_uri`, `protocol`, `response_type`, etc.) using `authParams` object.
* A verification code (`send:"code"`). You can then authenticate with this user using the `/oauth/ro` endpoint specifying `email` as `username` and `code` as `password`.

<pre><code><span class='http-verb'>POST</span> <span class="client_namespace"></span>passwordless/start
Content-Type: 'application/json'
<form id='passwordless-start-with_email-form'>{
  "client_id":   "<span class="client_client_id"></span>", // <span class="client_name"></span>
  "connection":  "<span>email</span>",
  "email":       "<input type="text" id="passwordless-start-with_email-email" required>",
  "send":        "<select id="passwordless-start-with_email-send"><option>link</option><option>code</option></select>",
  "authParams":  <textarea id="passwordless-start-with_email-authParams" rows="4" style="width:293px;"></textarea>
}
</form></code></pre>

<button class='btn btn-primary btn-tryme'
        data-result='passwordless-start-with_email-result'
        data-runner='passwordless-start-with_email'>
   Try me!
</button>

<pre class='tryme-result'><code id='passwordless-start-with_email-result'>Press the Try me! button to see the output result.</code></pre>

<h4>Error Code Reference</h4>

<h5>HTTP 400</h5>

<ul>
  <li>
    Invalid tenant:
    <pre>{"error":"bad.tenant","error_description":"error in tenant - tenant validation failed: invalid_tenant"}</pre>
  </li>
  <li>
    Missing client_id:
    <pre>{"error":"bad.client_id","error_description":"Missing required property: client_id"}</pre>
  </li>
  <li>
    Missing connection:
    <pre>{"error":"bad.connection","error_description":"Missing required property: connection"}</pre>
  </li>
  <li>
    Connection does not exist:
    <pre>{"error":"bad.connection","error_description":"Connection does not exist"}</pre>
  </li>
  <li>
    Disabled connection:
    <pre>{"error":"bad.connection","error_description":"Connection is disabled"}</pre>
  </li>
  <li>
    Invalid connection:
    <pre>{"error":"bad.connection","error_description":"Invalid connection strategy. It must either be a passwordless connection"}</pre>
  </li>
  <li>
    Invalid send parameter:
    <pre>{"error":"bad.send","error_description":"error in send - No enum match for: &lt;SEND_VALUE&gt;"}</pre>
  </li>
  <li>
    Invalid authParams:
    <pre>{"error":"bad.authParams","error_description":"error in authParams - invalid type: string (expected object)"}</pre>
  </li>
  <li>
    Invalid paramaters:
    <pre>{"error":"bad.request","error_description":"the following properties are not allowed: &lt;INVALID_PARAMETER_NAME&gt;"}</pre>
  </li>
  <li>
    Missing email:
    <pre>{"error":"bad.email","error_description":"Missing required property: email"}</pre>
  </li>
  <li>
    Invalid email:
    <pre>{"error":"bad.email","error_description":"error in email - email format validation failed: &lt;INVALID_EMAIL&gt;"}</pre>
  </li>
</ul>
  </div>

</div>

<h4 id="passwordless-with_sms"><a class="anchor" href="#passwordless-with_sms"><i class="icon-budicon-345"> </i></a>SMS</h4>
<div class="markdown"></div>
<div class="accordion">

<!-- POST /passwordless/start (sms) -->
  <div class="markdown" data-verb="POST" data-path="/passwordless/start" data-path2="/with_sms" data-description="Start flow sending a SMS message">
Given the user `phone_number`, it will send a SMS message with a verification code. You can then authenticate with this user using the `/oauth/ro` endpoint specifying `phone_number` as `username` and `code` as `password`:

<pre><code><span class='http-verb'>POST</span> <span class="client_namespace"></span>passwordless/start
Content-Type: 'application/json'
<form id='passwordless-start-with_sms-form'>{
  "client_id":    "<span class="client_client_id"></span>", // <span class="client_name"></span>
  "connection":   "<span>sms</span>",
  "phone_number": "<input type="text" id="passwordless-start-with_sms-phone_number" required>"
}
</form></code></pre>

<button class='btn btn-primary btn-tryme'
        data-result='passwordless-start-with_sms-result'
        data-runner='passwordless-start-with_sms'>
   Try me!
</button>

<pre class='tryme-result'><code id='passwordless-start-with_sms-result'>Press the Try me! button to see the output result.</code></pre>

<h4>Error Code Reference</h4>

<h5>HTTP 400</h5>

<ul>
  <li>
    Invalid tenant:
    <pre>{"error":"bad.tenant","error_description":"error in tenant - tenant validation failed: invalid_tenant"}</pre>
  </li>
  <li>
    Missing client_id:
    <pre>{"error":"bad.client_id","error_description":"Missing required property: client_id"}</pre>
  </li>
  <li>
    Missing connection:
    <pre>{"error":"bad.connection","error_description":"Missing required property: connection"}</pre>
  </li>
  <li>
    Connection does not exist:
    <pre>{"error":"bad.connection","error_description":"Connection does not exist"}</pre>
  </li>
  <li>
    Disabled connection:
    <pre>{"error":"bad.connection","error_description":"Connection is disabled"}</pre>
  </li>
  <li>
    Invalid connection:
    <pre>{"error":"bad.connection","error_description":"Invalid connection strategy. It must either be a passwordless connection"}</pre>
  </li>
  <li>
    Invalid authParams:
    <pre>{"error":"bad.authParams","error_description":"error in authParams - invalid type: string (expected object)"}</pre>
  </li>
  <li>
    Invalid paramaters:
    <pre>{"error":"bad.request","error_description":"the following properties are not allowed: &lt;INVALID_PARAMETER_VALUE&gt;"}</pre>
  </li>
  <li>
    Missing phone_number:
    <pre>{"error":"bad.phone_number","error_description":"Missing required property: phone_number"}</pre>
  </li>
  <li>
    Invalid phone_number format:
    <pre>{"error":"bad.phone_number","error_description":"String does not match pattern: ^\\+[0-9]{1,15}$"}</pre>
  </li>
  <li>
    SMS Provider errors:
    <pre>{"error":"sms_provider_error","error_description":"&lt;SPECIFIC_PROVIDER_MESSAGE&gt; (Code: &lt;SPECIFIC_PROVIDER_CODE&gt;)"}</pre>
  </li>
</ul>
  </div>

<!-- POST /oauth/ro (passwordless with sms) -->
  <div class="markdown" data-verb="POST" data-path="/oauth/ro" data-path2="/ro_with_sms" data-description="Login using phone number/verification code (active authentication)">
Given the user credentials (`phone_number` and `code`), it will do the authentication on the provider and return a JSON with the `access_token` and `id_token`.

<pre><code><span class='http-verb'>POST</span> <span class="client_namespace"></span>oauth/ro
Content-Type: 'application/json'
<form id='passwordless_with_sms-ro-form'>{
  "client_id":   "<span class="client_client_id"></span>", // <span class="client_name"></span>
  "connection":  "sms",
  "grant_type":  "password",
  "username":    "<input type="text" id="passwordless_with_sms-ro-username" placeholder="phone number" required>",
  "password":    "<input type="password" id="passwordless_with_sms-ro-password" placeholder="verification code">",
  "scope":       "<select id="passwordless_with_sms-ro-scope" class="scope-selector"></select>"
}
</form></code></pre>

<button class='btn btn-primary btn-tryme'
        data-result='passwordless_with_sms-ro-result'
        data-runner='passwordless_with_sms-ro'>
   Try me!
</button>

<pre class='tryme-result'><code id='passwordless_with_sms-ro-result'>Press the Try me! button to see the output result.</code></pre>

<h4>Error Code Reference</h4>

<ul>
  <li>
    Wrong phone number or verification code:
    <pre>{"error":"invalid_user_password","error_description":"Wrong phone number or verification code."}</pre>
  </li>
  <li>
    For more errors for the password grant type, see the: <a href="#db-and-ad">Database &amp; Active Directory / LDAP Authentication</a> /oauth/ro endpoint.
  </li>
</ul>

  </div>

</div>

<h3 id="enterpise-auth"><a class="anchor" href="#enterpise-auth"><i class="icon-budicon-345"> </i></a>Enterprise Authentication (SAML and Others)</h3>
<div class="markdown">These type of connections support browser based (passive) authentication. The user will be redirected to the SAML Provider (or Windows Azure AD and the rest) to enter their credentials. Notice that is the same `authorize` endpoint than the one defined in Social Authentication. It's repeated just for clarity.</div>
<div class="accordion">

<!-- GET /authorize (enterprise) -->
  <div class="markdown" data-verb="GET" data-path="/authorize" data-path2="/authorize_enterprise" data-description="Redirects to the enterprise provider login page">
Returns a 302 redirect to the enterprise provider specified in the `connection`.

<pre><code><span class='http-verb'>GET</span> <span class="client_namespace"></span>authorize?
  response_type=   <select id="authorize_enterprise-response_type" class="response_type-selector"></select>
  &amp;client_id=      <span class="client_client_id"></span> // <span class="client_name"></span>
  &amp;connection=     <select id="authorize_enterprise-connection" class="enterprise_connection-selector with-optional"></select>
  &amp;redirect_uri=   <span class="client_callback"></span>
  &amp;state=          <input type="text" id="authorize_enterprise-state">
  &amp;<input type="text" id="authorize_enterprise-additional_parameters" style="width: 400px;" placeholder="additional parameters">
</code></pre>

<button class='btn btn-primary btn-tryme'
        data-result='authorize_enterprise-result'
        data-runner='authorize_enterprise'>
   Try me!
</button>

Remarks:

* If no `connection` is specified, it will redirect to <a href="/#/login_page">Auth0 Login Page</a> and show the Login Widget.
* If `response_type=token`, after the user authenticates on the provider, it will redirect to your application callback URL passing the `access_token` and `id_token` in the address `location.hash`. This is used for Single Page Apps and also on Native Mobile SDKs.
* Additional parameters can be sent that will be passthrough to the provider.
* The `state` parameter will be sent back should be used for XSRF and contextual information (like a return url).
  </div>

</div>

<h2 id="saml"><a class="anchor" href="#saml"><i class="icon-budicon-345"> </i></a>Protocol: SAML</h2>
<div class="markdown">The SAML protocol is used for 3rd party SaaS applications mostly (e.g. Salesforce, Box, etc.). Auth0 supports SP and IDP Initiated Sign On. All the parameters of the SAML response can be modified through [rules](/#/rules).</div>

<div class="accordion">

<!-- GET /samlp/{client_id} -->
  <div class="markdown" data-verb="GET" data-path="/samlp/{client_id}" data-description="Accepts a SAML request to initiate a login">
Optionally, accepts a connection parameter to login with a specific provider. If no connection is specified, the <a href="/#/login_page">Auth0 Login Page</a> will be shown.

<pre><code><span class='http-verb'>GET</span> <span class="client_namespace"></span>samlp/<span class="client_client_id"></span>?connection=<select id="samlp-connection" class="connection-selector with-optional"></select>
</code></pre>

<button class='btn btn-primary btn-tryme'
        data-result='samlp-result'
        data-runner='samlp'>
   Try me!
</button>

Remarks

* The SAML Request `AssertionConsumerServiceURL` will be used to POST back the assertion and it has to match with the application callback URL.
  </div>

<!-- GET /samlp/metadata/{client_id} -->
  <div class="markdown" data-verb="GET" data-path="/samlp/metadata/{client_id}" data-description="Returns the SAML 2.0 Metadata">

<pre><code><span class='http-verb'>GET</span> <span class="client_namespace"></span>samlp/metadata/<span class="client_client_id"></span>
</code></pre>

<button class='btn btn-primary btn-tryme'
        data-result='samlp_metadata-result'
        data-runner='samlp_metadata'>
   Try me!
</button>
  </div>

<!-- POST /login/callback (IdP-Initiated) -->
  <div class="markdown" data-verb="POST" data-path="/login/callback" data-path2="/samlp_idp_initiated" data-description="Trigger an IdP-Initiated SSO flow">
Accepts an IDP Initiated SignOn SAMLResponse from a SAML Identity Provider. The `connection` corresponding to the identity provider is specified in the querystring. The application that Auth0 will redirect to afterwards needs to be specified on the SAML Provider IDP Initiated Sign On section.

<pre><code><span class='http-verb'>POST</span> <span class="client_namespace"></span>login/callback?connection=<select id="samlp_idp_initiated-connection" class="enterprise_connection-selector"></select>
Content-Type: 'application/x-www-form-urlencoded'

SAMLResponse=<span class='param'>PHNhbWxwOlJlc3BvbnNlIHhtbG5zOnNhbWxwPSJ1cm46b2FzaXM6bmFtZXM6dGM...
</code></pre>

<!--<button class='btn btn-primary btn-tryme'
        data-result='samlp_idp_initiated-result'
        data-runner='samlp_idp_initiated'>
   Try me!
</button>-->

  </div>

</div>

<h2 id="wsfed"><a class="anchor" href="#wsfed"><i class="icon-budicon-345"> </i></a>Protocol: WS-Fed</h2>
<div class="markdown">The WS-Fed protocol is used for Microsoft applications (e.g.: Office365, Dynamics CRM, etc.). All the parameters of the SAML assertion can be modified through [rules](/#/rules).</div>

<div class="accordion">

<!-- GET /wsfed/{client_id} -->
  <div class="markdown" data-verb="GET" data-path="/wsfed/{client_id}" data-description="Accepts a WS-Fed request to initiate a login">
The `client id` parameter is optional. You can use `wtrealm` as well.

<pre><code><span class='http-verb'>GET</span> <span class="client_namespace"></span>wsfed/<span class="client_client_id"></span>
</code></pre>

<button class='btn btn-primary btn-tryme'
        data-result='wsfed-result'
        data-runner='wsfed'>
   Try me!
</button>

Remarks

* The `wtrealm` parameter has to use one of these formats:
 * `urn:clientID`: e.g. urn:<span class="client_client_id"></span>
 * If it doesn't start with `urn` it will look up on the `client.clientAliases` array (this can only be set with the `/clients` API)
* The `whr` parameter will be mapped to the connection like this `urn:{connection_name}`. For instance, `urn:google-oauth2` indicates login with Google. If not `whr` is sent the <a href="/#/login_page">Auth0 Login Page</a> will be shown.
  </div>

<!-- GET /wsfed/FederationMetadata -->
  <div class="markdown" data-verb="GET" data-path="/wsfed/FederationMetadata" data-description="Returns the WS-Federation Metadata">

<pre><code><span class='http-verb'>GET</span> <span class="client_namespace"></span>wsfed/FederationMetadata/2007-06/FederationMetadata.xml
</code></pre>

<button class='btn btn-primary btn-tryme'
        data-result='wsfed_metadata-result'
        data-runner='wsfed_metadata'>
   Try me!
</button>
  </div>

</div>

<h2 id="others"><a class="anchor" href="#others"><i class="icon-budicon-345"> </i></a>Others</h2>

<h3 id="user-profile"><a class="anchor" href="#user-profile"><i class="icon-budicon-345"> </i></a>User Profile</h3>
<div class="markdown"></div>

<div class="accordion">

<!-- GET /userinfo -->
  <div class="markdown" data-verb="GET" data-path="/userinfo" data-description="Returns user profile based on the Auth0 access token">
Returns the user information based on the Auth0 access token (obtained during login).

<pre><code><span class='http-verb'>GET</span> <span class="client_namespace"></span>userinfo
Authorization: 'Bearer <input type="text" id="userinfo-access_token" placeholder="Auth0 access_token">'
</code></pre>

<button class='btn btn-primary btn-tryme'
        data-result='userinfo-result'
        data-runner='userinfo'>
   Try me!
</button>

<pre class='tryme-result'><code id='userinfo-result'>Press the Try me! button to see the output result.</code></pre>
  </div>

<!-- POST /tokeninfo -->
  <div class="markdown" data-verb="POST" data-path="/tokeninfo" data-description="Returns user profile based on the user's JWT">
Validates a JSON Web Token (signature and expiration) and returns the user information associated with the user id (`sub` property) of the token.

<pre><code><span class='http-verb'>POST</span> <span class="client_namespace"></span>tokeninfo
Content-Type: 'application/json'
<form id='tokeninfo-form'>{
  "id_token": "<textarea id="tokeninfo-id_token" rows="2" style="width:293px;" required></textarea>"
}</form></code></pre>

<button class='btn btn-primary btn-tryme'
        data-result='tokeninfo-result'
        data-runner='tokeninfo'>
   Try me!
</button>

<pre class='tryme-result'><code id='tokeninfo-result'>Press the Try me! button to see the output result.</code></pre>
  </div>

</div>

<h3 id="delegated"><a class="anchor" href="#delegated"><i class="icon-budicon-345"> </i></a>Delegated Authentication</h3>
<div class="markdown">Delegated authentication is used when some entity wants to call another on behalf of the user. For example, a user logs in to an application and then call an API. The application exchange the token of the logged in user with a token that is valid to call the API (signed with the API secret).</div>

<div class="accordion">

<!-- POST /oauth/token -->

  <div class="markdown" data-path="/oauth/token" data-verb="POST" data-description="Obtain a token to call the API">
Auth0 API requires an `access_token`. You can get one by authenticating with your `client_id` and `client_secret` (It will be valid for 24 hours). <strong>To obtain the global client ID and global client secret see the "Advanced" section under "Account Settings" in the Auth0 <a href="https://manage.auth0.com/#/account/advanced">dashboard</a></strong>.

<pre><code><span class='http-verb'>POST</span> <span class="client_namespace"></span>oauth/token
Content-Type: 'application/json'
<form id='accesstoken-form'>{
  "client_id":        "<span class='param client_client_id'>gloabl_client_id</span>",
  "client_secret":    "<span class='param client_client_secret'>global_client_secret</span>",
  "grant_type":       "<span class='param'>client_credentials</span>"
}
</form></code></pre>

Once authenticated, the `access_token` can be included in the request as part of the querystring (`?access_token=...`) or in an HTTP header (`Authorization: Bearer ...access_token...`).

<span class='label label-info'>Heads up!</span> access token last for 24hs, you better ask for a token everytime you make a request to the API or handle vigorously ```401``` responses.
  </div>

</div>

<div class="accordion">

<!-- POST /delegation -->
  <div class="markdown" data-verb="POST" data-path="/delegation" data-description="Obtain a delegation token">
Given an existing token, this endpoint will generate a new token signed with the `target` client secret. This is used to flow the identity of the user from the application to an API or across different APIs that are protected with different secrets.

<pre><code><span class='http-verb'>POST</span> <span class="client_namespace"></span>delegation
Content-Type: 'application/json'
<form id='delegation-form'>{
  "client_id":       "<span class="client_client_id"></span>", // <span class="client_name"></span>
  "grant_type":      "<select id="delegation-grant_type" required><option>urn:ietf:params:oauth:grant-type:jwt-bearer</option></select>",
  "<select id="delegation-token-type"><option>id_token</option><option>refresh_token</option></select>": "<textarea id="delegation-token" rows="2" style="width:293px;" required></textarea>",
  "target":          "<select id="delegation-target" name="client-list-without-global" class="with-id with-optional"></select>",
  "scope":           "<select id="delegation-scope" class="scope-selector"></select>",
  "api_type":        "<select id="delegation-api_type" class="api_type-selector"></select>",
  <textarea id="delegation-jsoneditor" rows="3" style="margin-top:7px;width:75%;"></textarea>
}
</form></code></pre>

<button class='btn btn-primary btn-tryme'
        data-result='delegation-result'
        data-runner='delegation'>
   Try me!
</button>

<pre class='tryme-result'><code id='delegation-result'>Press the Try me! button to see the output result.</code></pre>
  </div>

</div>

<h3 id="offline-access"><a class="anchor" href="#offline-access"><i class="icon-budicon-345"> </i></a>Offline Access (Refresh Tokens)</h3>
<div class="markdown"></div>

<div class="accordion">

<!-- GET /authorize (offline access) -->
  <div class="markdown" data-verb="GET" data-path="/authorize" data-path2="/offline-access" data-description="Trigger the login flow to request a refresh token">
Return a 302 redirect to the `connection` specifying an extra scope (`offline_access`) and a device id to identify the refresh tokens later in the dashboard. This extra scope will return the usual response (see the endpoint) plus a refresh token that can be used to obtain a new JSON Web Token. The refresh token can be revoked (see Revoke Refresh Token)

<pre><code><span class='http-verb'>GET</span> <span class="client_namespace"></span>authorize?
  response_type=   <select id="offline-response_type" class="response_type-selector"></select>
  &amp;client_id=      <span class="client_client_id"></span> // <span class="client_name"></span>
  &amp;connection=     <select id="offline-connection" class="connection-selector with-optional"></select>
  &amp;redirect_uri=   <span class="client_callback"></span>
  &amp;device=         <input id="offline-device" required>
  &amp;scope=          <span id="offline-scope">openid offline_access</span>
</code></pre>

<button class='btn btn-primary btn-tryme'
        data-result='offline-result'
        data-runner='offline'>
   Try me!
</button>
  </div>

</div>

<h3 id="impersonation"><a class="anchor" href="#impersonation"><i class="icon-budicon-345"> </i></a>Impersonation</h3>
<div class="markdown">
Generates a link that can be used once to log in as a specific user.
Useful for troubleshooting.

To distinguish between real logins and impersonation logins,
the profile of the impersonated user will contain additional `impersonated` and `impersonator` properties.
For example:

```json
"impersonated": true,
"impersonator": {
  "user_id": "auth0|...",
  "email": "admin@example.com"
}
```

**Note**: this API can only be used with **Global Client** credentials.
</div>

<div class="accordion">

<!-- POST /users/{user_id}/impersonate -->
  <div class="markdown" data-verb="POST" data-path="/users/{user_id}/impersonate" data-description="Obtain an impersonation URL to login as another user">

<pre><code><span class='http-verb'>POST</span> <span class="client_namespace"></span>users/<select id="impersonate-user_id" class="user-selector"></select>/impersonate
Content-Type:   'application/json'
Authorization:  'Bearer <span class="global_client_access_token"></span>'
<form id='impersonate-form'>{
  protocol:             "<select id="impersonate-protocol" class="protocol-selector"></select>",
  impersonator_id:      "<span id="impersonate-impersonator_id"><%= user.id %></span>", // <%= user.name || user.email %>
  client_id:            "<select id="impersonate-client_id" name="client-list-without-global" class="with-id"></select>",
  additionalParameters: <textarea id="impersonate-additional_parameters" rows="3" style="width:325px;">"response_type": "code",&#13;&#10;"state": ""</textarea>
}
</form></code></pre>

<button class='btn btn-primary btn-tryme'
        data-result='impersonate-result'
        data-runner='impersonate'>
   Try me!
</button>

<pre class='tryme-result'><code id='impersonate-result'>Press the Try me! button to see the output result.</code></pre>

  </div>

</div>

<h3 id="link-accounts"><a class="anchor" href="#link-accounts"><i class="icon-budicon-345"> </i></a>Link Accounts</h3>
<div class="markdown">When a user wants to link a second authentication method (e.g user/password + facebook), call this API.</div>

<div class="accordion">

<!-- GET /authorize (link) -->
  <div class="markdown" data-verb="GET" data-path="/authorize" data-path2="/link" data-description="Trigger the login flow to link an existing account with a new one">
Return a 302 redirect to the `connection` that wants to be linked to the current user identified by an `access_token` that was returned on login.

<pre><code><span class='http-verb'>GET</span> <span class="client_namespace"></span>authorize?
  response_type=   <select id="link-response_type" class="response_type-selector"></select>
  &amp;client_id=      <span class="client_client_id"></span> // <span class="client_name"></span>
  &amp;connection=     <select id="link-connection" class="connection-selector with-optional"></select>
  &amp;redirect_uri=   <span class="client_callback"></span>
  &amp;access_token=   <textarea id="link-access_token" rows="2" placeholder="logged-in user access token" style="width:290px;" required></textarea>
</code></pre>

<button class='btn btn-primary btn-tryme'
        data-result='link-result'
        data-runner='link'>
   Try me!
</button>
  </div>

<!-- POST /unlink -->
  <div class="markdown" data-verb="POST" data-path="/unlink" data-description="Unlink an account">

<pre><code><span class='http-verb'>POST</span> <span class="client_namespace"></span>unlink
Content-Type: 'application/json'
<form id='unlink-form'>{
  "access_token": "<textarea id="unlink-access_token" rows="2" style="width:290px;" placeholder="logged-in user access token" required></textarea>",
  "user_id":      "<select id="unlink-user_id" class="user-selector"></select>"
}
</form></code></pre>

<button class='btn btn-primary btn-tryme'
        data-result='unlink-result'
        data-runner='unlink'>
   Try me!
</button>

<pre class='tryme-result'><code id='unlink-result'>Press the Try me! button to see the output result.</code></pre>
  </div>

</div>

<h3 id="logout"><a class="anchor" href="#logout"><i class="icon-budicon-345 "> </i></a>Logout</h3>
<div class="markdown">Auth0 supports logging the user out of the identity provider that was used for login. Note that this might not be recommended for certain providers as described here <<%= docsDomain %>/logout>.</div>
<div class="accordion">

<!-- GET /logout -->
  <div class="markdown" data-verb="GET" data-path="/logout" data-description="Trigger the logout flow (deprecated)">
  <b>Please use `/v2/logout` instead.</b><br/>
 Logout the user from the identity provider. If you specify a `returnTo` parameter, we will redirect to the URL specified after the logout. This URL should included in any of the `Allowed Logout URLs` lists. There is a list at the application level (you need to use the `client_id` parameter to select the desired application's Allowed Logout URLs list) and a list at the Account level. Read more about [here](<%= docsDomain %>/logout).

<pre><code><span class='http-verb'>GET</span> <span class="client_namespace"></span>logout?
returnTo=<input type="text" id="logout-returnTo" placeholder="return url"></input>
&client_id=<input type="text" id="logout-client_id" placeholder="client id"></input>
</code></pre>

<button class='btn btn-primary btn-tryme'
        data-result='logout-result'
        data-runner='logout'>
   Try me!
</button>
  </div>

<!-- GET /v2/logout -->
  <div class="markdown" data-verb="GET" data-path="/v2/logout" data-description="Trigger the logout flow (recommended)">
 Logout the user from the identity provider. If you specify a `returnTo` parameter, we will redirect to the URL specified after the logout. This URL should included in any of the `Allowed Logout URLs` lists. There is a list at the application level (you need to use the `client_id` parameter to select the desired application's Allowed Logout URLs list) and a list at the Account level. Read more about [here](<%= docsDomain %>/logout).

<pre><code><span class='http-verb'>GET</span> <span class="client_namespace"></span>v2/logout?
returnTo=<input type="text" id="v2-logout-returnTo" placeholder="return url"></input>
&client_id=<input type="text" id="v2-logout-client_id" placeholder="client id"></input>
</code></pre>

<button class='btn btn-primary btn-tryme'
        data-result='v2-logout-result'
        data-runner='v2-logout'>
   Try me!
</button>
  </div>

</div>
